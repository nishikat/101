Observations

The significant benefits of switching from an Array to a Heap based Priority Queue that we noticed were all related to the time complexity. After implementing the code using Heaps, we noticed that it runs much faster compared to before. Before the program was using array based priority queue which did an inefficient search of O(n^2)  to find the next collision of i and j. Now the code is heap based and runs faster with a rate of O(nlogn) to find the next collision event. This is because the purpose of heap priority queues is to store tasks using a partial ordering based on priority and ensure the highest priority task as the head of the queue. When timing the two functions, it was clear that HeapPQ was faster than ArrayPQ, but the suprising fact was that it was not much faster. HeapPQ was initially faster than ArrayPQ but after around 550 balls, HeapPQ began to take longer than ArrayPQ. 